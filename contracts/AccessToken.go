// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package contracts

import (
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// StructsAccessTokenMetadata is an auto generated low-level Go binding around an user-defined struct.
type StructsAccessTokenMetadata struct {
	Dao   common.Address
	Owner common.Address
	Cid   string
}

// AccessTokenABI is the input ABI used to generate the binding from.
const AccessTokenABI = "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dao\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getTokenMetadata\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"dao\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"cid\",\"type\":\"string\"}],\"internalType\":\"structStructs.AccessTokenMetadata\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_cid\",\"type\":\"string\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_dao\",\"type\":\"address\"}],\"name\":\"setDao\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]"

// AccessTokenBin is the compiled bytecode used for deploying new contracts.
var AccessTokenBin = "0x60806040523480156200001157600080fd5b5060405162003dab38038062003dab8339818101604052810190620000379190620001fe565b8181818181600090816200004c9190620004ce565b5080600190816200005e9190620004ce565b50505050505050620005b5565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b620000d48262000089565b810181811067ffffffffffffffff82111715620000f657620000f56200009a565b5b80604052505050565b60006200010b6200006b565b9050620001198282620000c9565b919050565b600067ffffffffffffffff8211156200013c576200013b6200009a565b5b620001478262000089565b9050602081019050919050565b60005b838110156200017457808201518184015260208101905062000157565b60008484015250505050565b60006200019762000191846200011e565b620000ff565b905082815260208101848484011115620001b657620001b562000084565b5b620001c384828562000154565b509392505050565b600082601f830112620001e357620001e26200007f565b5b8151620001f584826020860162000180565b91505092915050565b6000806040838503121562000218576200021762000075565b5b600083015167ffffffffffffffff8111156200023957620002386200007a565b5b6200024785828601620001cb565b925050602083015167ffffffffffffffff8111156200026b576200026a6200007a565b5b6200027985828601620001cb565b9150509250929050565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680620002d657607f821691505b602082108103620002ec57620002eb6200028e565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302620003567fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8262000317565b62000362868362000317565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b6000620003af620003a9620003a3846200037a565b62000384565b6200037a565b9050919050565b6000819050919050565b620003cb836200038e565b620003e3620003da82620003b6565b84845462000324565b825550505050565b600090565b620003fa620003eb565b62000407818484620003c0565b505050565b5b818110156200042f5762000423600082620003f0565b6001810190506200040d565b5050565b601f8211156200047e576200044881620002f2565b620004538462000307565b8101602085101562000463578190505b6200047b620004728562000307565b8301826200040c565b50505b505050565b600082821c905092915050565b6000620004a36000198460080262000483565b1980831691505092915050565b6000620004be838362000490565b9150826002028217905092915050565b620004d98262000283565b67ffffffffffffffff811115620004f557620004f46200009a565b5b620005018254620002bd565b6200050e82828562000433565b600060209050601f83116001811462000546576000841562000531578287015190505b6200053d8582620004b0565b865550620005ad565b601f1984166200055686620002f2565b60005b82811015620005805784890151825560018201915060208501945060208101905062000559565b86831015620005a057848901516200059c601f89168262000490565b8355505b6001600288020188555050505b505050505050565b6137e680620005c56000396000f3fe608060405234801561001057600080fd5b50600436106101215760003560e01c80636637b882116100ad578063a22cb46511610071578063a22cb4651461031a578063b88d4fde14610336578063c87b56dd14610352578063d0def52114610382578063e985e9c5146103b257610121565b80636637b882146102765780636a6278421461029257806370a08231146102ae57806395d89b41146102de5780639f181b5e146102fc57610121565b806323b872dd116100f457806323b872dd146101c05780634162169f146101dc57806342842e0e146101fa57806360316801146102165780636352211e1461024657610121565b806301ffc9a71461012657806306fdde0314610156578063081812fc14610174578063095ea7b3146101a4575b600080fd5b610140600480360381019061013b91906120b2565b6103e2565b60405161014d91906120fa565b60405180910390f35b61015e6104c4565b60405161016b91906121a5565b60405180910390f35b61018e600480360381019061018991906121fd565b610556565b60405161019b919061226b565b60405180910390f35b6101be60048036038101906101b991906122b2565b61059c565b005b6101da60048036038101906101d591906122f2565b6106b3565b005b6101e4610713565b6040516101f1919061226b565b60405180910390f35b610214600480360381019061020f91906122f2565b610739565b005b610230600480360381019061022b91906121fd565b610759565b60405161023d91906123ee565b60405180910390f35b610260600480360381019061025b91906121fd565b6108c4565b60405161026d919061226b565b60405180910390f35b610290600480360381019061028b9190612410565b61094a565b005b6102ac60048036038101906102a79190612410565b610a1f565b005b6102c860048036038101906102c39190612410565b610a24565b6040516102d5919061244c565b60405180910390f35b6102e6610adb565b6040516102f391906121a5565b60405180910390f35b610304610b6d565b604051610311919061244c565b60405180910390f35b610334600480360381019061032f9190612493565b610b73565b005b610350600480360381019061034b9190612608565b610b89565b005b61036c600480360381019061036791906121fd565b610beb565b60405161037991906121a5565b60405180910390f35b61039c600480360381019061039791906126eb565b610d3c565b6040516103a9919061244c565b60405180910390f35b6103cc60048036038101906103c7919061274b565b610f89565b6040516103d991906120fa565b60405180910390f35b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806104ad57507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b806104bd57506104bc8261101d565b5b9050919050565b6060600080546104d3906127ba565b80601f01602080910402602001604051908101604052809291908181526020018280546104ff906127ba565b801561054c5780601f106105215761010080835404028352916020019161054c565b820191906000526020600020905b81548152906001019060200180831161052f57829003601f168201915b5050505050905090565b6000610561826110ff565b6004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60006105a7826108c4565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610617576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161060e9061285d565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff1661063661114a565b73ffffffffffffffffffffffffffffffffffffffff16148061066557506106648161065f61114a565b610f89565b5b6106a4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161069b906128ef565b60405180910390fd5b6106ae8383611152565b505050565b6106c46106be61114a565b8261120b565b610703576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106fa90612981565b60405180910390fd5b61070e8383836112a0565b505050565b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b61075483838360405180602001604052806000815250610b89565b505050565b610761611ff9565b600960008381526020019081526020016000206040518060600160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160028201805461083b906127ba565b80601f0160208091040260200160405190810160405280929190818152602001828054610867906127ba565b80156108b45780601f10610889576101008083540402835291602001916108b4565b820191906000526020600020905b81548152906001019060200180831161089757829003601f168201915b5050505050815250509050919050565b6000806108d0836112a5565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610941576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610938906129ed565b60405180910390fd5b80915050919050565b600073ffffffffffffffffffffffffffffffffffffffff16600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146109db576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109d290612a59565b60405180910390fd5b80600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600080fd5b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610a94576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a8b90612aeb565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b606060018054610aea906127ba565b80601f0160208091040260200160405190810160405280929190818152602001828054610b16906127ba565b8015610b635780601f10610b3857610100808354040283529160200191610b63565b820191906000526020600020905b815481529060010190602001808311610b4657829003601f168201915b5050505050905090565b60065481565b610b85610b7e61114a565b83836112e2565b5050565b610b9a610b9461114a565b8361120b565b610bd9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bd090612981565b60405180910390fd5b610be58484848461144e565b50505050565b6060610bf6826114aa565b610c35576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c2c90612b57565b60405180910390fd5b6000600860008481526020019081526020016000208054610c55906127ba565b80601f0160208091040260200160405190810160405280929190818152602001828054610c81906127ba565b8015610cce5780601f10610ca357610100808354040283529160200191610cce565b820191906000526020600020905b815481529060010190602001808311610cb157829003601f168201915b505050505090506000610cdf6114eb565b90506000815103610cf4578192505050610d37565b600082511115610d29578082604051602001610d11929190612bb3565b60405160208183030381529060405292505050610d37565b610d3284611502565b925050505b919050565b6000600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610dce576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dc590612c23565b60405180910390fd5b60066000815480929190610de190612c72565b91905055506000610df385858561155c565b905060006040518060600160405280600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018773ffffffffffffffffffffffffffffffffffffffff16815260200186868080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050508152509050610eb28660065461168a565b610ebe600654836118a7565b8060096000600654815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506040820151816002019081610f779190612e66565b50905050600654925050509392505050565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806110e857507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b806110f857506110f782611914565b5b9050919050565b611108816114aa565b611147576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161113e906129ed565b60405180910390fd5b50565b600033905090565b816004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff166111c5836108c4565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b600080611217836108c4565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16148061125957506112588185610f89565b5b8061129757508373ffffffffffffffffffffffffffffffffffffffff1661127f84610556565b73ffffffffffffffffffffffffffffffffffffffff16145b91505092915050565b600080fd5b60006002600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603611350576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161134790612f84565b60405180910390fd5b80600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c318360405161144191906120fa565b60405180910390a3505050565b6114598484846112a0565b6114658484848461197e565b6114a4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161149b90613016565b60405180910390fd5b50505050565b60008073ffffffffffffffffffffffffffffffffffffffff166114cc836112a5565b73ffffffffffffffffffffffffffffffffffffffff1614159050919050565b606060405180602001604052806000815250905090565b606061150d826114aa565b61154c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161154390612b57565b60405180910390fd5b61155582611b05565b9050919050565b606073__$44e65ce1626a4fb10403dde4233e47d3e6$"

// DeployAccessToken deploys a new Ethereum contract, binding an instance of AccessToken to it.
func DeployAccessToken(auth *bind.TransactOpts, backend bind.ContractBackend, name_ string, symbol_ string) (common.Address, *types.Transaction, *AccessToken, error) {
	parsed, err := abi.JSON(strings.NewReader(AccessTokenABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(AccessTokenBin), backend, name_, symbol_)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &AccessToken{AccessTokenCaller: AccessTokenCaller{contract: contract}, AccessTokenTransactor: AccessTokenTransactor{contract: contract}, AccessTokenFilterer: AccessTokenFilterer{contract: contract}}, nil
}

// AccessToken is an auto generated Go binding around an Ethereum contract.
type AccessToken struct {
	AccessTokenCaller     // Read-only binding to the contract
	AccessTokenTransactor // Write-only binding to the contract
	AccessTokenFilterer   // Log filterer for contract events
}

// AccessTokenCaller is an auto generated read-only Go binding around an Ethereum contract.
type AccessTokenCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// AccessTokenTransactor is an auto generated write-only Go binding around an Ethereum contract.
type AccessTokenTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// AccessTokenFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type AccessTokenFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// AccessTokenSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type AccessTokenSession struct {
	Contract     *AccessToken      // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// AccessTokenCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type AccessTokenCallerSession struct {
	Contract *AccessTokenCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts      // Call options to use throughout this session
}

// AccessTokenTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type AccessTokenTransactorSession struct {
	Contract     *AccessTokenTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts      // Transaction auth options to use throughout this session
}

// AccessTokenRaw is an auto generated low-level Go binding around an Ethereum contract.
type AccessTokenRaw struct {
	Contract *AccessToken // Generic contract binding to access the raw methods on
}

// AccessTokenCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type AccessTokenCallerRaw struct {
	Contract *AccessTokenCaller // Generic read-only contract binding to access the raw methods on
}

// AccessTokenTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type AccessTokenTransactorRaw struct {
	Contract *AccessTokenTransactor // Generic write-only contract binding to access the raw methods on
}

// NewAccessToken creates a new instance of AccessToken, bound to a specific deployed contract.
func NewAccessToken(address common.Address, backend bind.ContractBackend) (*AccessToken, error) {
	contract, err := bindAccessToken(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &AccessToken{AccessTokenCaller: AccessTokenCaller{contract: contract}, AccessTokenTransactor: AccessTokenTransactor{contract: contract}, AccessTokenFilterer: AccessTokenFilterer{contract: contract}}, nil
}

// NewAccessTokenCaller creates a new read-only instance of AccessToken, bound to a specific deployed contract.
func NewAccessTokenCaller(address common.Address, caller bind.ContractCaller) (*AccessTokenCaller, error) {
	contract, err := bindAccessToken(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &AccessTokenCaller{contract: contract}, nil
}

// NewAccessTokenTransactor creates a new write-only instance of AccessToken, bound to a specific deployed contract.
func NewAccessTokenTransactor(address common.Address, transactor bind.ContractTransactor) (*AccessTokenTransactor, error) {
	contract, err := bindAccessToken(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &AccessTokenTransactor{contract: contract}, nil
}

// NewAccessTokenFilterer creates a new log filterer instance of AccessToken, bound to a specific deployed contract.
func NewAccessTokenFilterer(address common.Address, filterer bind.ContractFilterer) (*AccessTokenFilterer, error) {
	contract, err := bindAccessToken(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &AccessTokenFilterer{contract: contract}, nil
}

// bindAccessToken binds a generic wrapper to an already deployed contract.
func bindAccessToken(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(AccessTokenABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_AccessToken *AccessTokenRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _AccessToken.Contract.AccessTokenCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_AccessToken *AccessTokenRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _AccessToken.Contract.AccessTokenTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_AccessToken *AccessTokenRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _AccessToken.Contract.AccessTokenTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_AccessToken *AccessTokenCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _AccessToken.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_AccessToken *AccessTokenTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _AccessToken.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_AccessToken *AccessTokenTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _AccessToken.Contract.contract.Transact(opts, method, params...)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256)
func (_AccessToken *AccessTokenCaller) BalanceOf(opts *bind.CallOpts, owner common.Address) (*big.Int, error) {
	var out []interface{}
	err := _AccessToken.contract.Call(opts, &out, "balanceOf", owner)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256)
func (_AccessToken *AccessTokenSession) BalanceOf(owner common.Address) (*big.Int, error) {
	return _AccessToken.Contract.BalanceOf(&_AccessToken.CallOpts, owner)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256)
func (_AccessToken *AccessTokenCallerSession) BalanceOf(owner common.Address) (*big.Int, error) {
	return _AccessToken.Contract.BalanceOf(&_AccessToken.CallOpts, owner)
}

// Dao is a free data retrieval call binding the contract method 0x4162169f.
//
// Solidity: function dao() view returns(address)
func (_AccessToken *AccessTokenCaller) Dao(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _AccessToken.contract.Call(opts, &out, "dao")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Dao is a free data retrieval call binding the contract method 0x4162169f.
//
// Solidity: function dao() view returns(address)
func (_AccessToken *AccessTokenSession) Dao() (common.Address, error) {
	return _AccessToken.Contract.Dao(&_AccessToken.CallOpts)
}

// Dao is a free data retrieval call binding the contract method 0x4162169f.
//
// Solidity: function dao() view returns(address)
func (_AccessToken *AccessTokenCallerSession) Dao() (common.Address, error) {
	return _AccessToken.Contract.Dao(&_AccessToken.CallOpts)
}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 tokenId) view returns(address)
func (_AccessToken *AccessTokenCaller) GetApproved(opts *bind.CallOpts, tokenId *big.Int) (common.Address, error) {
	var out []interface{}
	err := _AccessToken.contract.Call(opts, &out, "getApproved", tokenId)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 tokenId) view returns(address)
func (_AccessToken *AccessTokenSession) GetApproved(tokenId *big.Int) (common.Address, error) {
	return _AccessToken.Contract.GetApproved(&_AccessToken.CallOpts, tokenId)
}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 tokenId) view returns(address)
func (_AccessToken *AccessTokenCallerSession) GetApproved(tokenId *big.Int) (common.Address, error) {
	return _AccessToken.Contract.GetApproved(&_AccessToken.CallOpts, tokenId)
}

// GetTokenMetadata is a free data retrieval call binding the contract method 0x60316801.
//
// Solidity: function getTokenMetadata(uint256 _tokenId) view returns((address,address,string))
func (_AccessToken *AccessTokenCaller) GetTokenMetadata(opts *bind.CallOpts, _tokenId *big.Int) (StructsAccessTokenMetadata, error) {
	var out []interface{}
	err := _AccessToken.contract.Call(opts, &out, "getTokenMetadata", _tokenId)

	if err != nil {
		return *new(StructsAccessTokenMetadata), err
	}

	out0 := *abi.ConvertType(out[0], new(StructsAccessTokenMetadata)).(*StructsAccessTokenMetadata)

	return out0, err

}

// GetTokenMetadata is a free data retrieval call binding the contract method 0x60316801.
//
// Solidity: function getTokenMetadata(uint256 _tokenId) view returns((address,address,string))
func (_AccessToken *AccessTokenSession) GetTokenMetadata(_tokenId *big.Int) (StructsAccessTokenMetadata, error) {
	return _AccessToken.Contract.GetTokenMetadata(&_AccessToken.CallOpts, _tokenId)
}

// GetTokenMetadata is a free data retrieval call binding the contract method 0x60316801.
//
// Solidity: function getTokenMetadata(uint256 _tokenId) view returns((address,address,string))
func (_AccessToken *AccessTokenCallerSession) GetTokenMetadata(_tokenId *big.Int) (StructsAccessTokenMetadata, error) {
	return _AccessToken.Contract.GetTokenMetadata(&_AccessToken.CallOpts, _tokenId)
}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (_AccessToken *AccessTokenCaller) IsApprovedForAll(opts *bind.CallOpts, owner common.Address, operator common.Address) (bool, error) {
	var out []interface{}
	err := _AccessToken.contract.Call(opts, &out, "isApprovedForAll", owner, operator)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (_AccessToken *AccessTokenSession) IsApprovedForAll(owner common.Address, operator common.Address) (bool, error) {
	return _AccessToken.Contract.IsApprovedForAll(&_AccessToken.CallOpts, owner, operator)
}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (_AccessToken *AccessTokenCallerSession) IsApprovedForAll(owner common.Address, operator common.Address) (bool, error) {
	return _AccessToken.Contract.IsApprovedForAll(&_AccessToken.CallOpts, owner, operator)
}

// Mint is a free data retrieval call binding the contract method 0x6a627842.
//
// Solidity: function mint(address ) pure returns()
func (_AccessToken *AccessTokenCaller) Mint(opts *bind.CallOpts, arg0 common.Address) error {
	var out []interface{}
	err := _AccessToken.contract.Call(opts, &out, "mint", arg0)

	if err != nil {
		return err
	}

	return err

}

// Mint is a free data retrieval call binding the contract method 0x6a627842.
//
// Solidity: function mint(address ) pure returns()
func (_AccessToken *AccessTokenSession) Mint(arg0 common.Address) error {
	return _AccessToken.Contract.Mint(&_AccessToken.CallOpts, arg0)
}

// Mint is a free data retrieval call binding the contract method 0x6a627842.
//
// Solidity: function mint(address ) pure returns()
func (_AccessToken *AccessTokenCallerSession) Mint(arg0 common.Address) error {
	return _AccessToken.Contract.Mint(&_AccessToken.CallOpts, arg0)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_AccessToken *AccessTokenCaller) Name(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _AccessToken.contract.Call(opts, &out, "name")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_AccessToken *AccessTokenSession) Name() (string, error) {
	return _AccessToken.Contract.Name(&_AccessToken.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_AccessToken *AccessTokenCallerSession) Name() (string, error) {
	return _AccessToken.Contract.Name(&_AccessToken.CallOpts)
}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 tokenId) view returns(address)
func (_AccessToken *AccessTokenCaller) OwnerOf(opts *bind.CallOpts, tokenId *big.Int) (common.Address, error) {
	var out []interface{}
	err := _AccessToken.contract.Call(opts, &out, "ownerOf", tokenId)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 tokenId) view returns(address)
func (_AccessToken *AccessTokenSession) OwnerOf(tokenId *big.Int) (common.Address, error) {
	return _AccessToken.Contract.OwnerOf(&_AccessToken.CallOpts, tokenId)
}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 tokenId) view returns(address)
func (_AccessToken *AccessTokenCallerSession) OwnerOf(tokenId *big.Int) (common.Address, error) {
	return _AccessToken.Contract.OwnerOf(&_AccessToken.CallOpts, tokenId)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_AccessToken *AccessTokenCaller) SupportsInterface(opts *bind.CallOpts, interfaceId [4]byte) (bool, error) {
	var out []interface{}
	err := _AccessToken.contract.Call(opts, &out, "supportsInterface", interfaceId)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_AccessToken *AccessTokenSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _AccessToken.Contract.SupportsInterface(&_AccessToken.CallOpts, interfaceId)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_AccessToken *AccessTokenCallerSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _AccessToken.Contract.SupportsInterface(&_AccessToken.CallOpts, interfaceId)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_AccessToken *AccessTokenCaller) Symbol(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _AccessToken.contract.Call(opts, &out, "symbol")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_AccessToken *AccessTokenSession) Symbol() (string, error) {
	return _AccessToken.Contract.Symbol(&_AccessToken.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_AccessToken *AccessTokenCallerSession) Symbol() (string, error) {
	return _AccessToken.Contract.Symbol(&_AccessToken.CallOpts)
}

// TokenCount is a free data retrieval call binding the contract method 0x9f181b5e.
//
// Solidity: function tokenCount() view returns(uint256)
func (_AccessToken *AccessTokenCaller) TokenCount(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _AccessToken.contract.Call(opts, &out, "tokenCount")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TokenCount is a free data retrieval call binding the contract method 0x9f181b5e.
//
// Solidity: function tokenCount() view returns(uint256)
func (_AccessToken *AccessTokenSession) TokenCount() (*big.Int, error) {
	return _AccessToken.Contract.TokenCount(&_AccessToken.CallOpts)
}

// TokenCount is a free data retrieval call binding the contract method 0x9f181b5e.
//
// Solidity: function tokenCount() view returns(uint256)
func (_AccessToken *AccessTokenCallerSession) TokenCount() (*big.Int, error) {
	return _AccessToken.Contract.TokenCount(&_AccessToken.CallOpts)
}

// TokenURI is a free data retrieval call binding the contract method 0xc87b56dd.
//
// Solidity: function tokenURI(uint256 tokenId) view returns(string)
func (_AccessToken *AccessTokenCaller) TokenURI(opts *bind.CallOpts, tokenId *big.Int) (string, error) {
	var out []interface{}
	err := _AccessToken.contract.Call(opts, &out, "tokenURI", tokenId)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// TokenURI is a free data retrieval call binding the contract method 0xc87b56dd.
//
// Solidity: function tokenURI(uint256 tokenId) view returns(string)
func (_AccessToken *AccessTokenSession) TokenURI(tokenId *big.Int) (string, error) {
	return _AccessToken.Contract.TokenURI(&_AccessToken.CallOpts, tokenId)
}

// TokenURI is a free data retrieval call binding the contract method 0xc87b56dd.
//
// Solidity: function tokenURI(uint256 tokenId) view returns(string)
func (_AccessToken *AccessTokenCallerSession) TokenURI(tokenId *big.Int) (string, error) {
	return _AccessToken.Contract.TokenURI(&_AccessToken.CallOpts, tokenId)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address to, uint256 tokenId) returns()
func (_AccessToken *AccessTokenTransactor) Approve(opts *bind.TransactOpts, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _AccessToken.contract.Transact(opts, "approve", to, tokenId)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address to, uint256 tokenId) returns()
func (_AccessToken *AccessTokenSession) Approve(to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _AccessToken.Contract.Approve(&_AccessToken.TransactOpts, to, tokenId)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address to, uint256 tokenId) returns()
func (_AccessToken *AccessTokenTransactorSession) Approve(to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _AccessToken.Contract.Approve(&_AccessToken.TransactOpts, to, tokenId)
}

// Mint0 is a paid mutator transaction binding the contract method 0xd0def521.
//
// Solidity: function mint(address _to, string _cid) returns(uint256)
func (_AccessToken *AccessTokenTransactor) Mint0(opts *bind.TransactOpts, _to common.Address, _cid string) (*types.Transaction, error) {
	return _AccessToken.contract.Transact(opts, "mint0", _to, _cid)
}

// Mint0 is a paid mutator transaction binding the contract method 0xd0def521.
//
// Solidity: function mint(address _to, string _cid) returns(uint256)
func (_AccessToken *AccessTokenSession) Mint0(_to common.Address, _cid string) (*types.Transaction, error) {
	return _AccessToken.Contract.Mint0(&_AccessToken.TransactOpts, _to, _cid)
}

// Mint0 is a paid mutator transaction binding the contract method 0xd0def521.
//
// Solidity: function mint(address _to, string _cid) returns(uint256)
func (_AccessToken *AccessTokenTransactorSession) Mint0(_to common.Address, _cid string) (*types.Transaction, error) {
	return _AccessToken.Contract.Mint0(&_AccessToken.TransactOpts, _to, _cid)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) returns()
func (_AccessToken *AccessTokenTransactor) SafeTransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _AccessToken.contract.Transact(opts, "safeTransferFrom", from, to, tokenId)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) returns()
func (_AccessToken *AccessTokenSession) SafeTransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _AccessToken.Contract.SafeTransferFrom(&_AccessToken.TransactOpts, from, to, tokenId)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) returns()
func (_AccessToken *AccessTokenTransactorSession) SafeTransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _AccessToken.Contract.SafeTransferFrom(&_AccessToken.TransactOpts, from, to, tokenId)
}

// SafeTransferFrom0 is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId, bytes data) returns()
func (_AccessToken *AccessTokenTransactor) SafeTransferFrom0(opts *bind.TransactOpts, from common.Address, to common.Address, tokenId *big.Int, data []byte) (*types.Transaction, error) {
	return _AccessToken.contract.Transact(opts, "safeTransferFrom0", from, to, tokenId, data)
}

// SafeTransferFrom0 is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId, bytes data) returns()
func (_AccessToken *AccessTokenSession) SafeTransferFrom0(from common.Address, to common.Address, tokenId *big.Int, data []byte) (*types.Transaction, error) {
	return _AccessToken.Contract.SafeTransferFrom0(&_AccessToken.TransactOpts, from, to, tokenId, data)
}

// SafeTransferFrom0 is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId, bytes data) returns()
func (_AccessToken *AccessTokenTransactorSession) SafeTransferFrom0(from common.Address, to common.Address, tokenId *big.Int, data []byte) (*types.Transaction, error) {
	return _AccessToken.Contract.SafeTransferFrom0(&_AccessToken.TransactOpts, from, to, tokenId, data)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_AccessToken *AccessTokenTransactor) SetApprovalForAll(opts *bind.TransactOpts, operator common.Address, approved bool) (*types.Transaction, error) {
	return _AccessToken.contract.Transact(opts, "setApprovalForAll", operator, approved)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_AccessToken *AccessTokenSession) SetApprovalForAll(operator common.Address, approved bool) (*types.Transaction, error) {
	return _AccessToken.Contract.SetApprovalForAll(&_AccessToken.TransactOpts, operator, approved)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_AccessToken *AccessTokenTransactorSession) SetApprovalForAll(operator common.Address, approved bool) (*types.Transaction, error) {
	return _AccessToken.Contract.SetApprovalForAll(&_AccessToken.TransactOpts, operator, approved)
}

// SetDao is a paid mutator transaction binding the contract method 0x6637b882.
//
// Solidity: function setDao(address _dao) returns()
func (_AccessToken *AccessTokenTransactor) SetDao(opts *bind.TransactOpts, _dao common.Address) (*types.Transaction, error) {
	return _AccessToken.contract.Transact(opts, "setDao", _dao)
}

// SetDao is a paid mutator transaction binding the contract method 0x6637b882.
//
// Solidity: function setDao(address _dao) returns()
func (_AccessToken *AccessTokenSession) SetDao(_dao common.Address) (*types.Transaction, error) {
	return _AccessToken.Contract.SetDao(&_AccessToken.TransactOpts, _dao)
}

// SetDao is a paid mutator transaction binding the contract method 0x6637b882.
//
// Solidity: function setDao(address _dao) returns()
func (_AccessToken *AccessTokenTransactorSession) SetDao(_dao common.Address) (*types.Transaction, error) {
	return _AccessToken.Contract.SetDao(&_AccessToken.TransactOpts, _dao)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 tokenId) returns()
func (_AccessToken *AccessTokenTransactor) TransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _AccessToken.contract.Transact(opts, "transferFrom", from, to, tokenId)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 tokenId) returns()
func (_AccessToken *AccessTokenSession) TransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _AccessToken.Contract.TransferFrom(&_AccessToken.TransactOpts, from, to, tokenId)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 tokenId) returns()
func (_AccessToken *AccessTokenTransactorSession) TransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _AccessToken.Contract.TransferFrom(&_AccessToken.TransactOpts, from, to, tokenId)
}

// AccessTokenApprovalIterator is returned from FilterApproval and is used to iterate over the raw logs and unpacked data for Approval events raised by the AccessToken contract.
type AccessTokenApprovalIterator struct {
	Event *AccessTokenApproval // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AccessTokenApprovalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AccessTokenApproval)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AccessTokenApproval)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AccessTokenApprovalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AccessTokenApprovalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AccessTokenApproval represents a Approval event raised by the AccessToken contract.
type AccessTokenApproval struct {
	Owner    common.Address
	Approved common.Address
	TokenId  *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterApproval is a free log retrieval operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)
func (_AccessToken *AccessTokenFilterer) FilterApproval(opts *bind.FilterOpts, owner []common.Address, approved []common.Address, tokenId []*big.Int) (*AccessTokenApprovalIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var approvedRule []interface{}
	for _, approvedItem := range approved {
		approvedRule = append(approvedRule, approvedItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _AccessToken.contract.FilterLogs(opts, "Approval", ownerRule, approvedRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return &AccessTokenApprovalIterator{contract: _AccessToken.contract, event: "Approval", logs: logs, sub: sub}, nil
}

// WatchApproval is a free log subscription operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)
func (_AccessToken *AccessTokenFilterer) WatchApproval(opts *bind.WatchOpts, sink chan<- *AccessTokenApproval, owner []common.Address, approved []common.Address, tokenId []*big.Int) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var approvedRule []interface{}
	for _, approvedItem := range approved {
		approvedRule = append(approvedRule, approvedItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _AccessToken.contract.WatchLogs(opts, "Approval", ownerRule, approvedRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AccessTokenApproval)
				if err := _AccessToken.contract.UnpackLog(event, "Approval", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApproval is a log parse operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)
func (_AccessToken *AccessTokenFilterer) ParseApproval(log types.Log) (*AccessTokenApproval, error) {
	event := new(AccessTokenApproval)
	if err := _AccessToken.contract.UnpackLog(event, "Approval", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// AccessTokenApprovalForAllIterator is returned from FilterApprovalForAll and is used to iterate over the raw logs and unpacked data for ApprovalForAll events raised by the AccessToken contract.
type AccessTokenApprovalForAllIterator struct {
	Event *AccessTokenApprovalForAll // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AccessTokenApprovalForAllIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AccessTokenApprovalForAll)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AccessTokenApprovalForAll)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AccessTokenApprovalForAllIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AccessTokenApprovalForAllIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AccessTokenApprovalForAll represents a ApprovalForAll event raised by the AccessToken contract.
type AccessTokenApprovalForAll struct {
	Owner    common.Address
	Operator common.Address
	Approved bool
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterApprovalForAll is a free log retrieval operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_AccessToken *AccessTokenFilterer) FilterApprovalForAll(opts *bind.FilterOpts, owner []common.Address, operator []common.Address) (*AccessTokenApprovalForAllIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _AccessToken.contract.FilterLogs(opts, "ApprovalForAll", ownerRule, operatorRule)
	if err != nil {
		return nil, err
	}
	return &AccessTokenApprovalForAllIterator{contract: _AccessToken.contract, event: "ApprovalForAll", logs: logs, sub: sub}, nil
}

// WatchApprovalForAll is a free log subscription operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_AccessToken *AccessTokenFilterer) WatchApprovalForAll(opts *bind.WatchOpts, sink chan<- *AccessTokenApprovalForAll, owner []common.Address, operator []common.Address) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _AccessToken.contract.WatchLogs(opts, "ApprovalForAll", ownerRule, operatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AccessTokenApprovalForAll)
				if err := _AccessToken.contract.UnpackLog(event, "ApprovalForAll", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApprovalForAll is a log parse operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_AccessToken *AccessTokenFilterer) ParseApprovalForAll(log types.Log) (*AccessTokenApprovalForAll, error) {
	event := new(AccessTokenApprovalForAll)
	if err := _AccessToken.contract.UnpackLog(event, "ApprovalForAll", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// AccessTokenTransferIterator is returned from FilterTransfer and is used to iterate over the raw logs and unpacked data for Transfer events raised by the AccessToken contract.
type AccessTokenTransferIterator struct {
	Event *AccessTokenTransfer // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AccessTokenTransferIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AccessTokenTransfer)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AccessTokenTransfer)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AccessTokenTransferIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AccessTokenTransferIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AccessTokenTransfer represents a Transfer event raised by the AccessToken contract.
type AccessTokenTransfer struct {
	From    common.Address
	To      common.Address
	TokenId *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterTransfer is a free log retrieval operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)
func (_AccessToken *AccessTokenFilterer) FilterTransfer(opts *bind.FilterOpts, from []common.Address, to []common.Address, tokenId []*big.Int) (*AccessTokenTransferIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _AccessToken.contract.FilterLogs(opts, "Transfer", fromRule, toRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return &AccessTokenTransferIterator{contract: _AccessToken.contract, event: "Transfer", logs: logs, sub: sub}, nil
}

// WatchTransfer is a free log subscription operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)
func (_AccessToken *AccessTokenFilterer) WatchTransfer(opts *bind.WatchOpts, sink chan<- *AccessTokenTransfer, from []common.Address, to []common.Address, tokenId []*big.Int) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _AccessToken.contract.WatchLogs(opts, "Transfer", fromRule, toRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AccessTokenTransfer)
				if err := _AccessToken.contract.UnpackLog(event, "Transfer", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransfer is a log parse operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)
func (_AccessToken *AccessTokenFilterer) ParseTransfer(log types.Log) (*AccessTokenTransfer, error) {
	event := new(AccessTokenTransfer)
	if err := _AccessToken.contract.UnpackLog(event, "Transfer", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
